var compareJson=function(e,t,n){"use strict";const r=(e,t)=>{let{cb:n,deepCount:s,keys:a,parentKey:i,values:o}=t??{};s?s++:s=0,a??=[],o??=[],i??="";for(const t in e){if(!e.hasOwnProperty(t))continue;const c=e[t],u=i?`${i},${t}`:t;o.push(c),a.includes(u)||a.push(u),"function"==typeof n&&n(t,c,s,i),"object"==typeof c&&null!==c&&r(c,{cb:n,deepCount:s,keys:a,parentKey:u})}};var s;!function(e){e[e.DIR=0]="DIR",e[e.FILE=1]="FILE",e[e.NULL=2]="NULL"}(s||(s={}));const a=e=>new Promise(((t,r)=>{n.stat(e,((e,n)=>{e?r(e):n.isFile()?t(s.FILE):n.isDirectory()?t(s.DIR):t(s.NULL)}))})),i=(e,t="utf8")=>new Promise(((r,s)=>{n.readFile(e,t,((e,t)=>{e?s(e):r(t)}))})),o=async e=>{const t=e.lastIndexOf("/"),n=e.slice(t),r=e.replace(n,"");return{data:await i(e),path:r,name:n}},c=e=>new Promise(((r,i)=>{n.readdir(e,(async(n,u)=>{if(n)i(n);else{const n=[];for(const r of u){const i=t.join(e,r),u=await a(i);u===s.FILE?n.push(await o(i)):u===s.DIR&&n.push(...await c(i))}r(n)}}))}));var u=Object.freeze({__proto__:null,checkPathType:a,default:async e=>{if("string"!=typeof e)throw new TypeError("filePath must be string");return await a(e)===s.FILE?await o(e):await c(e)},readDir:c,readFile:i,readFileAsFileObject:o});return e.fileOrDir=u,e.jsonKeys=e=>{const t=[];return r(e,{keys:t}),t},e.traverseJson=r,e}({},path,fs);
